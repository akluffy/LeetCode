/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        vector<vector<int> > result;
        queue<TreeNode *> nQ;
        if(root == NULL) return result;
        nQ.push(root);
        int numNextLevel = 1;
        while(!nQ.empty()) {
            int numCurrLevel = numNextLevel;
            numNextLevel = 0;
            vector<int> level;
            
            //traversal for every level
            for(int i = 0; i < numCurrLevel; i++) {
                root = nQ.front();
                nQ.pop();
                level.push_back(root->val);
                if(root->left) {
                    nQ.push(root->left);
                    numNextLevel++;
                }
                if(root->right) {
                    nQ.push(root->right);
                    numNextLevel++;
                }
            }
            result.push_back(level);
        }
        
        reverse(result.begin(), result.end()); 
        return result;
    }
};