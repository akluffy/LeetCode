/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void appendNodeAndAdvance(ListNode **head, ListNode **tail, ListNode **node) {
        appendNode(*node, head, tail);
        *node = (*node)->next;
    }
    
    void appendNode(ListNode *(&node), ListNode **head, ListNode **tail) {
        *head ? (*tail)->next = node : *head = node;
        *tail = node;
    }
    
    ListNode *mergeTwoLists(ListNode *l1, ListNode *l2) {
        ListNode *head = NULL;
        ListNode *tail =  NULL;
        while(l1 && l2) {
            appendNodeAndAdvance(&head, &tail, l1->val < l2->val ? &l1 : &l2);
        }
    
        if(l1) appendNode(l1, &head, &tail);
        if(l2) appendNode(l2, &head, &tail);
    
        return head;
    }
    

    ListNode *sort(ListNode **head, int length) {
        if(length == 1) {
            ListNode *temp = *head;
            *head = (*head)->next;
            temp->next = NULL;
            return temp;
        }
        ListNode *leftHead = sort(head, length / 2);
        ListNode *rightHead = sort(head, length - length / 2);
        ListNode *newHead = mergeTwoLists(leftHead, rightHead);
        return newHead;
    }

    ListNode *sortList(ListNode *head) {
        if(head == NULL) return NULL;
        int length = 0;
        ListNode *it = head;
        while(it != NULL) {
            length++;
            it = it->next;
        }
        ListNode *newHead = sort(&head, length);
        return newHead;
    }
    

};